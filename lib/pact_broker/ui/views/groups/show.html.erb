<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Network Graph</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="Duncan Alexander">
<script type="text/javascript" src="/javascripts/d3.v3.js.pagespeed.ce.dFNRrGTALe.js"></script>
<style>body{font-family:"Helvetica Neue",Arial,sans-serif;font-size:.75em;font-weight:bold;padding:2em}#legend{display:inline-block;width:600;height:70}</style>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<!-- developed by Duncan Alexander - hypothete.com -->
</head>
<body>
<h1>Network graph of pacticipant relationships</h1>
<div id="legend" </div>
<script type="text/javascript">
var w, h, svg;
window.onload = function() {
    w = window.innerWidth;
    h = window.innerHeight;
    svg = d3.select("body").append("svg").attr("width", w).attr("height", h).attr("version", 1.1).attr("xmlns", "http://www.w3.org/2000/svg");
    var people = [];
    var maxgrant = 0;
    var maxrad = 0;
    var arraydepts = [];
    var maxorder = 0;



    d3.text("<%= csv_path %>", "text/csv", function(unparsedData) {
        var data=d3.csv.parseRows(unparsedData);
        data.forEach(
            function(d) {
                var person = {
                    id: d[0],
                    department: d[1],
                    interviewed: parseInt(d[2]),
                    grants: parseInt(d[3]) || 0,
                    order: parseInt(d[5]),
                    children: d.slice(6).filter(function(e) {
                        if (parseInt(e) != NaN) {
                            return e;
                        }
                    })
                };
                if (person.grants > maxgrant) {
                    maxgrant = person.grants;
                }

                if (person.order > maxorder) {
                    maxorder = person.order;
                }
                if (arraydepts.indexOf(person.department) == -1) {
                    arraydepts.push(person.department);
                }
                people.push(person);
            });
        people.sort(function(a, b) {
            return d3.ascending(a.order, b.order);
        });
        var lookup = {};
        var radius = Math.max(100, people.length * 2.5);
        if (3 * radius > w) {
            w = 3 * radius;
            svg.attr("width", w);
        }
        if (3.5 * radius > h) {
            h = 3.5 * radius;
            svg.attr("height", h);
        }
        maxrad = (radius * Math.PI / people.length) + 2;
        lastdept = '';
        var g = svg.selectAll("g").data(people).enter().append("g").attr("transform", function(d, i) {
            var x = radius * Math.sin(2 * Math.PI * (i / people.length)) + w / 2;
            var y = radius * Math.cos(2 * Math.PI * (i / people.length)) + h / 2;
            lookup[d.id] = {
                x: x,
                y: y,
                i: i
            };
            return "translate(" + x + "," + y + ")";
        }).attr("id", function(d, i) {
            return i;
        }).attr("class", function(d) {
            if (d.department != lastdept) {
                lastdept = d.department;
                return lastdept;
            } else {
                return "";
            }
        });
        var pairs = [];
        people.forEach(function(d) {
            d.children.forEach(function(e) {
                if (lookup[e]) {
                    pairs.push([d.id, e]);
                }
            });
        });
        pairs.forEach(function(f) {
            for (var i = 0; i < pairs.length; i++) {
                if (f[0] == pairs[i][1] && f[1] == pairs[i][0]) {
                    pairs.splice(i, 1);
                    f[2] = 2;
                }
            }
        });
        pairs.sort(function(a, b) {
            return d3.ascending(a[0], b[0]);
        });
        var lineo = g.selectAll("path").data(function(d) {
            var mypairs = [];
            pairs.forEach(function(g) {
                var dummypair = [];
                if (g[0] == d.id) {
                    dummypair[0] = g[0];
                    dummypair[1] = g[1];
                    if (g[2]) {
                        dummypair[2] = g[2];
                    } else {
                        dummypair[2] = 0;
                    }
                    mypairs.push(dummypair);
                } else if (g[1] == d.id) {
                    dummypair[0] = g[1];
                    dummypair[1] = g[0];
                    if (g[2]) {
                        dummypair[2] = g[2];
                    } else {
                        dummypair[2] = 1;
                    }
                    mypairs.push(dummypair);
                }
            });
            return mypairs;
        }).enter().append("path").attr("d", function(d) {
            var dx = lookup[d[1]].x - lookup[d[0]].x;
            var dy = lookup[d[1]].y - lookup[d[0]].y;
            var dr = Math.sqrt(dx * dx + dy * dy);
            var inout = 0;
            var bigsmall = 0;
            if ((lookup[d[1]].i > lookup[d[0]].i && Math.abs(lookup[d[1]].i - lookup[d[0]].i) <= people.length / 2) || (lookup[d[1]].i < lookup[d[0]].i && Math.abs(lookup[d[1]].i - lookup[d[0]].i) >= people.length / 2)) {
                inout = 1;
            }
            return "M" + 0 + "," + 0 + "A" + dr + ", " + dr + " 0 0," + inout + " " + dx + "," + dy;
        }).attr("stroke", function(d) {
            if (d[2] == 0) {
                return "red";
            } else if (d[2] == 1) {
                return "teal";
            } else {
                return "purple";
            }
        }).attr("stroke-width", ".35").attr("opacity", ".5").attr("fill", "none").attr("class", function(d) {
            return d[0] + " " + d[1] + " " + lookup[d[0]].i;
        });
        var ordcols = d3.scale.category10().domain([0, arraydepts.length]);

        var cirscale = d3.scale.quantile().domain([0, 1000000, 5000000, 15000000, 70000000]).range([3, maxrad / 3, maxrad / 2, 3 * maxrad / 4, maxrad]);
        var circles = g.append("circle").attr("r", function(d) {
            return cirscale(d.grants);
        }).attr("fill", function(d) {
            if (d.interviewed) {
                return ordcols(arraydepts.indexOf(d.department));
            } else {
                return "white";
            }
        }).attr("stroke", function(d) {
            return ordcols(arraydepts.indexOf(d.department));
        }).attr("stroke-width", 2).attr("cx", function(d, i) {
            return cirscale(d.grants) * Math.sin(2 * Math.PI * i / people.length);
        }).attr("cy", function(d, i) {
            return cirscale(d.grants) * Math.cos(2 * Math.PI * i / people.length);
        });
        var text = g.append("text").text(function(d) {
            return this.parentNode.className.animVal;
        }).attr("x", function(d, i) {
            if (i <= people.length / 2) {
                return 2 * maxrad;
            } else {
                return -2 * maxrad;
            }
        }).attr("text-anchor", function(d, i) {
            if (i <= people.length / 2) {
                return "start";
            } else {
                return "end";
            }
        }).attr("transform", function(d, i) {
            if (i <= people.length / 2) {
                return "rotate(" + 90 * Math.cos(2 * Math.PI * i / people.length) + ")";
            } else {
                return "rotate(" + -90 * Math.cos(2 * Math.PI * i / people.length) + ")";
            }
        }).attr("fill", function(d) {
            return ordcols(arraydepts.indexOf(d.department));
        });
        circles.on("mouseover", function() {
            svg.selectAll("path").transition().duration(500).attr("opacity", "0.1");
            d3.select(this.parentNode).selectAll("path").transition().duration(500).attr("opacity", "1").attr("stroke-width", "1");
            d3.select(this.parentNode).selectAll("text").transition().duration(500).text(function(d) {
                return this.parentNode.className.animVal + " ID: " + d.id;
            });
        }).on("mouseout", function() {
            svg.selectAll("path").transition().duration(500).attr("stroke-width", ".35").attr("opacity", ".5");
            d3.select(this.parentNode).selectAll("text").transition().duration(500).text(function(d) {
                return this.parentNode.className.animVal;
            });
        });
        legend = d3.select("#legend").append("svg").attr("width", 600).attr("height", 70);
        var circlekey = [70000000, 15000000, 5000000, 1000000, 0];

        function commaRound(num) {
            var count = 0;
            var beforeperiod = '';
            var numstr = Math.round(num).toString();
            for (var i = numstr.length - 1; i >= 0; i--) {
                beforeperiod = numstr.charAt(i) + beforeperiod;
                count += 1;
                if (count > 2 && i > 0) {
                    beforeperiod = ',' + beforeperiod;
                    count = 0;
                }
            }
            return beforeperiod;
        }

        var connlines = legend.selectAll("line").data([0, 1, 2]).enter().append("line").attr("x1", maxrad).attr("y1", function(d, i) {
            return 5 + 25 * d;
        }).attr("x2", maxrad * 4).attr("y2", function(d, i) {
            return 5 + 25 * d;
        }).attr("stroke", function(d) {
            if (d == 0) {
                return "red";
            } else if (d == 1) {
                return "teal";
            }
            return "purple";
        }).attr("stroke-width", 2);
        legend.append("text").text("is a consumer of").attr("x", maxrad * 5).attr("y", 10).attr("fill", "black");
        legend.append("text").text("is a provider for").attr("x", maxrad * 5).attr("y", 35).attr("fill", "black");
        legend.append("text").text("is a consumer and a provider of").attr("x", maxrad * 5).attr("y", 60).attr("fill", "black");
    });
}</script>
<script>//<![CDATA[
(function(){var d=encodeURIComponent,f=window,g=document,h="documentElement",k="length",l="prototype",m="body",p="&",s="&ci=",t=",",u="?",v="Content-Type",w="Microsoft.XMLHTTP",x="Msxml2.XMLHTTP",y="POST",z="application/x-www-form-urlencoded",A="img",B="input",C="load",D="oh=",E="on",F="pagespeed_url_hash",G="url=";f.pagespeed=f.pagespeed||{};var H=f.pagespeed,I=function(a,b,c){this.c=a;this.e=b;this.d=c;this.b=this.f();this.a={}};I[l].f=function(){return{height:f.innerHeight||g[h].clientHeight||g[m].clientHeight,width:f.innerWidth||g[h].clientWidth||g[m].clientWidth}};I[l].g=function(a){a=a.getBoundingClientRect();return{top:a.top+(void 0!==f.pageYOffset?f.pageYOffset:(g[h]||g[m].parentNode||g[m]).scrollTop),left:a.left+(void 0!==f.pageXOffset?f.pageXOffset:(g[h]||g[m].parentNode||g[m]).scrollLeft)}};I[l].h=function(a){if(0>=a.offsetWidth&&0>=a.offsetHeight)return!1;a=this.g(a);var b=a.top.toString()+t+a.left.toString();if(this.a.hasOwnProperty(b))return!1;this.a[b]=!0;return a.top<=this.b.height&&a.left<=this.b.width};I[l].i=function(a){var b;if(f.XMLHttpRequest)b=new XMLHttpRequest;else if(f.ActiveXObject)try{b=new ActiveXObject(x)}catch(c){try{b=new ActiveXObject(w)}catch(e){}}if(!b)return!1;b.open(y,this.c+(-1==this.c.indexOf(u)?u:p)+G+d(this.e));b.setRequestHeader(v,z);b.send(a);return!0};I[l].k=function(){for(var a=[A,B],b=[],c={},e=0;e<a[k];++e)for(var q=g.getElementsByTagName(a[e]),n=0;n<q[k];++n){var r=q[n].getAttribute(F);r&&(q[n].getBoundingClientRect&&this.h(q[n]))&&!(r in c)&&(b.push(r),c[r]=!0)}if(0!=b[k]){a=D+this.d;a+=s+d(b[0]);for(e=1;e<b[k];++e){c=t+d(b[e]);if(131072<a[k]+c[k])break;a+=c}H.criticalImagesBeaconData=a;this.i(a)}};H.j=function(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent(E+b,c);else{var e=a[E+b];a[E+b]=function(){c.call(this);e&&e.call(this)}}};H.l=function(a,b,c){var e=new I(a,b,c);H.j(f,C,function(){f.setTimeout(function(){e.k()},0)})};H.criticalImagesBeaconInit=H.l;})();pagespeed.criticalImagesBeaconInit('/mod_pagespeed_beacon','http://hypothete.com/images/2013/networkgraph/','G9EePgfFsf');
//]]></script></body>
</html>