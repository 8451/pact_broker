<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Network Graph</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="Duncan Alexander">
<script type="text/javascript" src="/javascripts/d3.v3.js.pagespeed.ce.dFNRrGTALe.js"></script>
<style>body{font-family:"Helvetica Neue",Arial,sans-serif;font-size:.75em;font-weight:bold;padding:2em}#legend{display:inline-block;width:600;height:70}</style>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<!-- developed by Duncan Alexander - hypothete.com -->
</head>
<body>
<h1>Network graph of pacticipant relationships</h1>
<div id="legend" </div>
<script type="text/javascript">
var windowWidth, windowHeight, svg;
window.onload = function() {
    var legendHeight = 200;
    windowWidth = window.innerWidth;
    windowHeight = window.innerHeight - legendHeight;
    svg = d3.select("body").append("svg").attr("width", windowWidth).attr("height", windowHeight).attr("version", 1.1).attr("xmlns", "http://www.w3.org/2000/svg");
    var people = [];
    var maxgrant = 0;
    var maxrad = 0;
    var arrayPacticipants = [];
    var maxorder = 0;



    d3.text("<%= csv_path %>", "text/csv", function(unparsedData) {
        var data=d3.csv.parseRows(unparsedData);
        data.forEach(
            function(d) {
                var person = {
                    id: d[0],
                    pacticipant: d[1],
                    // interviewed: parseInt(d[2]),
                    grants: 1,
                    order: parseInt(d[5]),
                    children: d.slice(6).filter(function(e) {
                        if (parseInt(e) != NaN) {
                            return e;
                        }
                    })
                };
                if (person.grants > maxgrant) {
                    maxgrant = person.grants;
                }

                if (person.order > maxorder) {
                    maxorder = person.order;
                }
                if (arrayPacticipants.indexOf(person.pacticipant) == -1) {
                    arrayPacticipants.push(person.pacticipant);
                }
                people.push(person);
            });
        people.sort(function(a, b) {
            return d3.ascending(a.order, b.order);
        });
        var circleMinRadius = 100;
        var lookup = {};
        var radius = Math.max(circleMinRadius, people.length * 2.5);
        if (3 * radius > windowWidth) {
            windowWidth = 3 * radius;
            svg.attr("width", windowWidth);
        }
        if (3.5 * radius > windowHeight) {
            windowHeight = 3.5 * radius;
            svg.attr("height", windowHeight);
        }
        maxrad = (radius * Math.PI / people.length) + 2;
        lastPacticipant = '';
        var g = svg.selectAll("g").data(people).enter().append("g").attr("transform", function(d, i) {
            var x = radius * Math.sin(2 * Math.PI * (i / people.length)) + windowWidth / 2;
            var y = radius * Math.cos(2 * Math.PI * (i / people.length)) + windowHeight / 2;
            lookup[d.id] = {
                x: x,
                y: y,
                i: i
            };
            return "translate(" + x + "," + y + ")";
        }).attr("id", function(d, i) {
            return i;
        }).attr("class", function(d) {
            if (d.pacticipant != lastPacticipant) {
                lastPacticipant = d.pacticipant;
                return lastPacticipant;
            } else {
                return "";
            }
        });
        var pairs = [];
        people.forEach(function(d) {
            d.children.forEach(function(e) {
                if (lookup[e]) {
                    pairs.push([d.id, e]);
                }
            });
        });
        pairs.forEach(function(f) {
            for (var i = 0; i < pairs.length; i++) {
                if (f[0] == pairs[i][1] && f[1] == pairs[i][0]) {
                    pairs.splice(i, 1);
                    f[2] = 2;
                }
            }
        });
        pairs.sort(function(a, b) {
            return d3.ascending(a[0], b[0]);
        });
        var lineo = g.selectAll("path").data(function(d) {
            var mypairs = [];
            pairs.forEach(function(g) {
                var dummypair = [];
                if (g[0] == d.id) {
                    dummypair[0] = g[0];
                    dummypair[1] = g[1];
                    if (g[2]) {
                        dummypair[2] = g[2];
                    } else {
                        dummypair[2] = 0;
                    }
                    mypairs.push(dummypair);
                } else if (g[1] == d.id) {
                    dummypair[0] = g[1];
                    dummypair[1] = g[0];
                    if (g[2]) {
                        dummypair[2] = g[2];
                    } else {
                        dummypair[2] = 1;
                    }
                    mypairs.push(dummypair);
                }
            });
            return mypairs;
        }).enter().append("path").attr("d", function(d) {
            var dx = lookup[d[1]].x - lookup[d[0]].x;
            var dy = lookup[d[1]].y - lookup[d[0]].y;
            var dr = Math.sqrt(dx * dx + dy * dy);
            var inout = 0;
            var bigsmall = 0;
            if ((lookup[d[1]].i > lookup[d[0]].i && Math.abs(lookup[d[1]].i - lookup[d[0]].i) <= people.length / 2) || (lookup[d[1]].i < lookup[d[0]].i && Math.abs(lookup[d[1]].i - lookup[d[0]].i) >= people.length / 2)) {
                inout = 1;
            }
            return "M" + 0 + "," + 0 + "A" + dr + ", " + dr + " 0 0," + inout + " " + dx + "," + dy;
        }).attr("stroke", function(d) {
            if (d[2] == 0) {
                return "red";
            } else if (d[2] == 1) {
                return "teal";
            } else {
                return "purple";
            }
        }).attr("stroke-width", ".35").attr("opacity", ".5").attr("fill", "none").attr("class", function(d) {
            return d[0] + " " + d[1] + " " + lookup[d[0]].i;
        });
        var ordcols = d3.scale.category10().domain([0, arrayPacticipants.length]);

        var cirscale = d3.scale.quantile().domain([0, 1000000, 5000000, 15000000, 70000000]).range([3, maxrad / 3, maxrad / 2, 3 * maxrad / 4, maxrad]);

        var circles = g.append("circle").attr("r", function(d) {
            // console.debug(d);
            //circle size
            return 4; //cirscale(d.grants);
        })
        .attr("fill", function(d) {
            // if (d.interviewed) {
                return ordcols(arrayPacticipants.indexOf(d.pacticipant));
            // } else {
                // return "white";
            // }
        })
        .attr("stroke", function(d) {
            return ordcols(arrayPacticipants.indexOf(d.pacticipant));
        })
        .attr("stroke-width", 2).attr("cx", function(d, i) {
            return cirscale(d.grants) * Math.sin(2 * Math.PI * i / people.length);
        })
        .attr("cy", function(d, i) {
            return cirscale(d.grants) * Math.cos(2 * Math.PI * i / people.length);
        });
        var text = g.append("text").text(function(d) {
            return this.parentNode.className.animVal;
        }).attr("x", function(d, i) {
            if (i <= people.length / 2) {
                return 2 * maxrad;
            } else {
                return -2 * maxrad;
            }
        }).attr("text-anchor", function(d, i) {
            if (i <= people.length / 2) {
                return "start";
            } else {
                return "end";
            }
        }).attr("transform", function(d, i) {
            if (i <= people.length / 2) {
                return "rotate(" + 90 * Math.cos(2 * Math.PI * i / people.length) + ")";
            } else {
                return "rotate(" + -90 * Math.cos(2 * Math.PI * i / people.length) + ")";
            }
        }).attr("fill", function(d) {
            return ordcols(arrayPacticipants.indexOf(d.pacticipant));
        });
        circles.on("mouseover", function() {
            svg.selectAll("path").transition().duration(500).attr("opacity", "0.1");
            d3.select(this.parentNode).selectAll("path").transition().duration(500).attr("opacity", "1").attr("stroke-width", "1");
            // d3.select(this.parentNode).selectAll("text").transition().duration(500); //.text(function(d) {
            //     return this.parentNode.className.animVal + " ID: " + d.id;
            // });
        }).on("mouseout", function() {
            svg.selectAll("path").transition().duration(500).attr("stroke-width", ".35").attr("opacity", ".5");
            // d3.select(this.parentNode).selectAll("text").transition().duration(500); //.text(function(d) {
            //     return this.parentNode.className.animVal;
            // });
        });
        legend = d3.select("#legend").append("svg").attr("width", 600).attr("height", 70);
        var circlekey = [70000000, 15000000, 5000000, 1000000, 0];

        // function commaRound(num) {
        //     var count = 0;
        //     var beforeperiod = '';
        //     var numstr = Math.round(num).toString();
        //     for (var i = numstr.length - 1; i >= 0; i--) {
        //         beforeperiod = numstr.charAt(i) + beforeperiod;
        //         count += 1;
        //         if (count > 2 && i > 0) {
        //             beforeperiod = ',' + beforeperiod;
        //             count = 0;
        //         }
        //     }
        //     return beforeperiod;
        // }

        var lineLength = 20;

        var connlines = legend.selectAll("line").data([0, 1, 2]).enter().append("line").attr("x1", lineLength).attr("y1", function(d, i) {
            return 5 + 25 * d;
        }).attr("x2", lineLength * 4).attr("y2", function(d, i) {
            return 5 + 25 * d;
        }).attr("stroke", function(d) {
            if (d == 0) {
                return "red";
            } else if (d == 1) {
                return "teal";
            }
            return "purple";
        }).attr("stroke-width", 2);
        legend.append("text").text("is a consumer of").attr("x", lineLength * 5).attr("y", 10).attr("fill", "black");
        legend.append("text").text("is a provider for").attr("x", lineLength * 5).attr("y", 35).attr("fill", "black");
        legend.append("text").text("is a consumer and a provider of").attr("x", lineLength * 5).attr("y", 60).attr("fill", "black");
    });
}</script>
</body>
</html>